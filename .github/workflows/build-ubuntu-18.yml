name: Build Ubuntu 18.04

on:  
  push:
  pull_request:
    branches:
      - master

jobs:
  build-ubuntu:
    runs-on: ubuntu-18.04
    
    env:
      # enable starting Qt GUI Applications
      QT_QPA_PLATFORM: offscreen
    
    steps:
    - name: Getting closer to vanilla Ubuntu 18.04
      run: |
        sudo apt-get -y update
        
        echo "Creating directory for libgcc1"
        mkdir libgcc1_deb
        cd libgcc1_deb
        pwd
        
        echo "Downloading bionic-security libgcc1"
        apt-get download -t bionic-security libgcc1
        
        echo "Purging GH Actions toolchain PPA"
        sudo apt-get -y install ppa-purge
        sudo ppa-purge -y ubuntu-toolchain-r/test
        
        echo "installing libgcc1_deb"
        sudo dpkg -i *
        
        echo "Installing g++"
        sudo apt-get -y install g++
        
        cd ..
      shell: bash

    - name: Install Dependencies
      run: |
        sudo apt-get -y update
        sudo apt-get -y install cmake doxygen graphviz build-essential zlib1g-dev qt5-default libhdf5-dev libprotobuf-dev libprotoc-dev protobuf-compiler libcurl4-openssl-dev python3-setuptools libqwt-qt5-dev libyaml-cpp-dev
      shell: bash

    - name: Install Capâ€™n Proto
      run: |
        mkdir "${{ runner.workspace }}/capnp"
        cd "${{ runner.workspace }}/capnp"
        curl -O https://capnproto.org/capnproto-c++-0.9.0.tar.gz
        tar zxf capnproto-c++-0.9.0.tar.gz
        cd capnproto-c++-0.9.0
        ./configure
        make -j
        sudo make install

    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules:  'true'
        fetch-depth: 0

    - name: Install Python requirements
      shell: bash
      run: |
        sudo apt-get -y install python3.8-dev python3.8-venv
        mkdir ".venv_build"
        python3.8 -m venv ".venv_build"
        source ".venv_build/bin/activate"
        pip install --upgrade pip
        pip install wheel setuptools
        pip install -r "$GITHUB_WORKSPACE/doc/requirements.txt"

    - name: CMake
      run: |
        source ".venv_build/bin/activate"
        
        export CC=/usr/bin/gcc-7
        export CXX=/usr/bin/g++-7
        mkdir "${{ runner.workspace }}/_build"
        cd "${{ runner.workspace }}/_build"
        
        cmake $GITHUB_WORKSPACE \
        -DHAS_HDF5=ON \
        -DHAS_QT5=ON \
        -DHAS_CURL=ON \
        -DHAS_CAPNPROTO=ON \
        -DHAS_FTXUI=ON \
        -DBUILD_DOCS=ON \
        -DBUILD_APPS=ON \
        -DBUILD_SAMPLES=ON \
        -DBUILD_TIME=ON \
        -DBUILD_PY_BINDING=ON \
        -DBUILD_STANDALONE_PY_WHEEL=ON \
        -DBUILD_CSHARP_BINDING=OFF \
        -DBUILD_ECAL_TESTS=ON \
        -DECAL_LAYER_ICEORYX=OFF \
        -DECAL_INCLUDE_PY_SAMPLES=OFF \
        -DECAL_INSTALL_SAMPLE_SOURCES=ON \
        -DECAL_JOIN_MULTICAST_TWICE=OFF \
        -DECAL_NPCAP_SUPPORT=OFF \
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON \
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=OFF \
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON \
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON \
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON \
        -DECAL_THIRDPARTY_BUILD_CURL=OFF \
        -DECAL_THIRDPARTY_BUILD_GTEST=ON \
        -DECAL_THIRDPARTY_BUILD_HDF5=OFF \
        -DECAL_THIRDPARTY_BUILD_RECYCLE=ON \
        -DECAL_THIRDPARTY_BUILD_TCP_PUBSUB=ON \
        -DECAL_THIRDPARTY_BUILD_QWT=OFF \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_SYSCONFDIR=/etc \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_INSTALL_LOCALSTATEDIR=/var \
        -DCMAKE_INSTALL_LIBDIR=lib/x86_64-linux-gnu \
        -DPython_FIND_VIRTUALENV=ONLY
        
        sudo mkdir /etc/ecal
        sudo cp "$GITHUB_WORKSPACE/ecal/core/cfg/ecal.ini" /etc/ecal
      shell: bash

    - name: Build Release
      run: cmake --build . --config Release
      working-directory: ${{ runner.workspace }}/_build

    # Create Python Wheels
    # The strang-looking double-cmake is an ugly workaround to force CMake to
    # re-find Python, after we have changed the venv from the outside. The
    # alternative would be to clean everything, which would cause an unnecessary
    # rebuild of eCAL for each python Version.
    - name: Build Python 3.8 Wheel
      run: |
        sudo apt-get -y install python3.8-dev python3.8-venv
        mkdir ".venv_38"
        python3.8 -m venv ".venv_38"
        source ".venv_38/bin/activate"
        pip install --upgrade pip
        pip install wheel setuptools
        cmake $GITHUB_WORKSPACE -DPython_FIND_VIRTUALENV=FIRST
        cmake $GITHUB_WORKSPACE -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: bash
      working-directory: ${{ runner.workspace }}/_build

    - name: Build Python 3.7 Wheel
      run: |
        sudo apt-get -y install python3.7-dev python3.7-venv
        mkdir ".venv_37"
        python3.7 -m venv ".venv_37"
        source ".venv_37/bin/activate"
        pip install --upgrade pip
        pip install wheel setuptools
        cmake $GITHUB_WORKSPACE -DPython_FIND_VIRTUALENV=FIRST
        cmake $GITHUB_WORKSPACE -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: bash
      working-directory: ${{ runner.workspace }}/_build

    - name: Build Python 3.6 Wheel
      run: |
        sudo apt-get -y install python3.6-dev python3.6-venv
        mkdir ".venv_36"
        python3.6 -m venv ".venv_36"
        source ".venv_36/bin/activate"
        pip install --upgrade pip
        pip install wheel setuptools
        cmake $GITHUB_WORKSPACE -DPython_FIND_VIRTUALENV=FIRST
        cmake $GITHUB_WORKSPACE -DPython_FIND_VIRTUALENV=ONLY
        cmake --build . --target create_python_wheel --config Release
      shell: bash
      working-directory: ${{ runner.workspace }}/_build

    - name: Run Tests
      run: ctest -V
      working-directory: ${{ runner.workspace }}/_build

    - name: Pack
      run: cpack -G DEB
      working-directory: ${{ runner.workspace }}/_build

    - name: Upload Debian
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-debian
        path: ${{ runner.workspace }}/_build/_deploy/*.deb

    - name: Upload Python Wheel
      uses: actions/upload-artifact@v3
      with:
        name: ubuntu-python-wheel
        path: ${{ runner.workspace }}/_build/_deploy/*.whl
