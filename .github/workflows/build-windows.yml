name: Build Windows Server 2019

on:  
  push:
  pull_request:
    branches:
      - master

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.2'
        target: 'desktop'
        arch: 'win64_msvc2015_64'

    - name: Install Dependencies
      run: choco install doxygen.install

#    - name: Install Capâ€™n Proto
#      run: |
#        mkdir "${{ runner.workspace }}/capnp"
#        cd "${{ runner.workspace }}/capnp"
#        git clone https://github.com/sandstorm-io/capnproto.git
#        cd capnproto
#        git checkout release-0.8.0
#        cd c++
#        mkdir _build
#        cd _build
#        cmake .. -G "Visual Studio 16 2019" -A x64 -T v140
#        cmake --build . --parallel --config Release
#        cmake --build . --target install --config Release

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules:  'true'
        fetch-depth: 0

    - name: Download NPCAP
      run: |
        cd %GITHUB_WORKSPACE%
        powershell -Command "& 'build_win\download_npcap.ps1'"
      shell: cmd
      
    - name: Create Python virtualenv
      run: |
        mkdir "${{ runner.workspace }}\_build\complete\.venv\"
        python -m venv "${{ runner.workspace }}\.venv"
        CALL "${{ runner.workspace }}\.venv\Scripts\activate.bat"
           
        echo Upgrading pip
        python -m pip install --upgrade pip

        echo Installing python requirements
        pip install -r "%GITHUB_WORKSPACE%\requirements.txt"

      shell: cmd
        
    - name: CMake SDK
      run: |
        mkdir "${{ runner.workspace }}\_build\sdk\"
        cd "${{ runner.workspace }}/_build/sdk"
        
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 ^
        -DHAS_HDF5=ON ^
        -DHAS_QT5=ON ^
        -DHAS_CURL=ON ^
        -DHAS_CAPNPROTO=OFF ^
        -DBUILD_DOCS=OFF ^
        -DBUILD_APPS=OFF ^
        -DBUILD_SAMPLES=OFF ^
        -DBUILD_TIME=ON ^
        -DBUILD_PY_BINDING=OFF ^
        -DBUILD_CSHARP_BINDING=OFF ^
        -DBUILD_ECAL_TESTS=OFF ^
        -DECAL_LAYER_ICEORYX=OFF ^
        -DECAL_INCLUDE_PY_SAMPLES=OFF ^
        -DECAL_INSTALL_SAMPLE_SOURCES=OFF ^
        -DECAL_JOIN_MULTICAST_TWICE=OFF ^
        -DECAL_NPCAP_SUPPORT=ON ^
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON ^
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=ON ^
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON ^
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON ^
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON ^
        -DECAL_THIRDPARTY_BUILD_CURL=ON ^
        -DECAL_THIRDPARTY_BUILD_GTEST=ON ^
        -DECAL_THIRDPARTY_BUILD_HDF5=ON ^
        -DBUILD_SHARED_LIBS=OFF ^
        -DCMAKE_PREFIX_PATH="%ProgramFiles(x86)%/Cap'n Proto/lib/cmake/CapnProto" ^
        -DCMAKE_BUILD_TYPE=Debug ^
        -DCPACK_PACK_WITH_INNOSETUP=OFF
      shell: cmd
      
    - name: CMake Complete
      run: |
        CALL "${{ runner.workspace }}\.venv\Scripts\activate.bat"
        cd "${{ runner.workspace }}/_build/complete"
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -T v140 ^
        -DHAS_HDF5=ON ^
        -DHAS_QT5=ON ^
        -DHAS_CURL=ON ^
        -DHAS_CAPNPROTO=OFF ^
        -DBUILD_DOCS=ON ^
        -DBUILD_APPS=ON ^
        -DBUILD_SAMPLES=ON ^
        -DBUILD_TIME=ON ^
        -DBUILD_PY_BINDING=ON ^
        -DBUILD_CSHARP_BINDING=ON ^
        -DBUILD_ECAL_TESTS=ON ^
        -DECAL_LAYER_ICEORYX=OFF ^
        -DECAL_INCLUDE_PY_SAMPLES=OFF ^
        -DECAL_INSTALL_SAMPLE_SOURCES=ON ^
        -DECAL_JOIN_MULTICAST_TWICE=OFF ^
        -DECAL_NPCAP_SUPPORT=ON ^
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON ^
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=ON ^
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON ^
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON ^
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON ^
        -DECAL_THIRDPARTY_BUILD_CURL=ON ^
        -DECAL_THIRDPARTY_BUILD_GTEST=ON ^
        -DECAL_THIRDPARTY_BUILD_HDF5=ON ^
        -DBUILD_SHARED_LIBS=OFF ^
        -DCMAKE_PREFIX_PATH="%ProgramFiles(x86)%/Cap'n Proto/lib/cmake/CapnProto" ^
        -DCMAKE_BUILD_TYPE=Release ^
        -DCPACK_PACK_WITH_INNOSETUP=ON
        mkdir "%ALLUSERSPROFILE%\eCAL"
        copy "%GITHUB_WORKSPACE%\ecal\core\cfg\ecal.ini" "%ALLUSERSPROFILE%\eCAL"
      shell: cmd

    - name: Build SDK
      run: cmake --build . --config Debug
      working-directory: ${{ runner.workspace }}/_build/sdk
      
    - name: Build Release
      run: cmake --build . --config Release
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Build Python Egg
      run: cmake --build . --target create_python_egg --config Release
      working-directory: ${{ runner.workspace }}/_build/complete

#    - name: Build Documentation C
#      run: cmake --build . --target documentation_c
#      working-directory: ${{ runner.workspace }}/_build
#
#    - name: Build Documentation C++
#      run: cmake --build . --target documentation_cpp
#      working-directory: ${{ runner.workspace }}/_build

    - name: Run Tests
      run: ctest -C Release -V
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Pack SDK
      run: cpack -C Debug
      working-directory: ${{ runner.workspace }}/_build/sdk

    - name: Pack complete setup
      run: cpack -C Release
      working-directory: ${{ runner.workspace }}/_build/complete

    - name: Upload Windows setup
      uses: actions/upload-artifact@v2
      with:
        name: windows-setup
        path: ${{ runner.workspace }}/_build/complete/_deploy/*.exe

    - name: Upload Python Egg
      uses: actions/upload-artifact@v2
      with:
        name: windows-python-egg
        path: ${{ runner.workspace }}/_build/complete/_deploy/*.egg
