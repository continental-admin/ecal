name: Build with CMake (Ubuntu 20.04, Windows Server 2019, macOS Catalina 10.15)

on: [push]

jobs:
  build-ubuntu:
    runs-on: ubuntu-20.04
    
    steps:
    - name: Install Dependencies
      run: sudo apt-get install ninja-build libprotobuf-dev libprotoc-dev protobuf-compiler qt5-default libhdf5-dev

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'
    - run: |
        git fetch --prune --unshallow --tags
        echo exit code $?
        git tag --list

    - name: CMake
      run: |
        mkdir "${{ runner.workspace }}/build"
        cd "${{ runner.workspace }}/build"
        cmake $GITHUB_WORKSPACE -G "Ninja" \
        -DHAS_HDF5=ON \
        -DHAS_QT5=ON \
        -DHAS_CURL=ON \
        -DHAS_CAPNPROTO=OFF \
        -DBUILD_DOCS=ON \
        -DBUILD_APPS=ON \
        -DBUILD_SAMPLES=ON \
        -DBUILD_TIME=ON \
        -DBUILD_PY_BINDING=ON \
        -DBUILD_CSHARP_BINDING=OFF \
        -DBUILD_TESTS=ON \
        -DECAL_LAYER_ICEORYX=OFF \
        -DECAL_INCLUDE_PY_SAMPLES=OFF \
        -DECAL_INSTALL_SAMPLE_SOURCES=ON \
        -DECAL_JOIN_MULTICAST_TWICE=OFF \
        -DECAL_NPCAP_SUPPORT=OFF \
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON \
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=OFF \
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON \
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON \
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON \
        -DECAL_THIRDPARTY_BUILD_CURL=OFF \
        -DECAL_THIRDPARTY_BUILD_GTEST=ON \
        -DECAL_THIRDPARTY_BUILD_HDF5=OFF
      shell: bash

    - name: Build Release
      run: cmake --build . --config Release
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Python Egg
      run: cmake --build . --target create_python_egg --config Release
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Documentation C
      run: cmake --build . --target documentation_c
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Documentation C++
      run: cmake --build . --target documentation_cpp
      working-directory: ${{ runner.workspace }}/build      

    - name: Run Tests
      run: ctest -V
      working-directory: ${{ runner.workspace }}/build

    - name: Pack
      run: cpack -G DEB
      working-directory: ${{ runner.workspace }}/build

    - name: Upload Debian
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu-debian
        path: ${{ runner.workspace }}/build/_deploy/*.deb

    - name: Upload Python Egg
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu-python-egg
        path: ${{ runner.workspace }}/build/_deploy/*.egg

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v2

    - name: Install Dependencies
      run: choco install doxygen.install

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Cache build/thirdparty
      id: cache-build-thirdparty
      uses: actions/cache@v2
      with:
        path: "${{ runner.workspace }}/build/thirdparty"
        key: ${{ runner.os }}-build-thirdparty

    - name: CMake
      run: |
        mkdir "${{ runner.workspace }}/build"
        cd "${{ runner.workspace }}/build"
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 |
        -DHAS_HDF5=ON |
        -DHAS_QT5=ON |
        -DHAS_CURL=ON |
        -DHAS_CAPNPROTO=OFF |
        -DBUILD_DOCS=ON |
        -DBUILD_APPS=ON |
        -DBUILD_SAMPLES=ON |
        -DBUILD_TIME=ON |
        -DBUILD_PY_BINDING=ON |
        -DBUILD_CSHARP_BINDING=ON |
        -DBUILD_TESTS=ON |
        -DECAL_LAYER_ICEORYX=OFF |
        -DECAL_INCLUDE_PY_SAMPLES=OFF |
        -DECAL_INSTALL_SAMPLE_SOURCES=ON |
        -DECAL_JOIN_MULTICAST_TWICE=OFF |
        -DECAL_NPCAP_SUPPORT=OFF |
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON |
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=ON |
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON |
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON |
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON |
        -DECAL_THIRDPARTY_BUILD_CURL=ON |
        -DECAL_THIRDPARTY_BUILD_GTEST=ON |
        -DECAL_THIRDPARTY_BUILD_HDF5=ON |
        -DBUILD_SHARED_LIBS=OFF |
        -DCMAKE_INSTALL_PREFIX=_install        
      shell: cmd

    - name: Build Release
      run: cmake --build . --parallel --config Release
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Python Egg
      run: cmake --build . --target create_python_egg --config Release
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Documentation C
      run: cmake --build . --target documentation_c
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Documentation C++
      run: cmake --build . --target documentation_cpp
      working-directory: ${{ runner.workspace }}/build      

    - name: Run Tests
      run: ctest -C Release -V
      working-directory: ${{ runner.workspace }}/build

    - name: Pack
      run: cpack -C Release
      working-directory: ${{ runner.workspace }}/build

    - name: Upload MSI
      uses: actions/upload-artifact@v2
      with:
        name: windows-msi
        path: ${{ runner.workspace }}/build/_deploy/*.msi

    - name: Upload Python Egg
      uses: actions/upload-artifact@v2
      with:
        name: windows-python-egg
        path: ${{ runner.workspace }}/build/_deploy/*.egg

  build-macos:
    runs-on: macos-latest

    steps:
    - name: Install Qt
      uses: jurplel/install-qt-action@v2

    - name: Install Dependencies
      run: brew install ninja doxygen graphviz hdf5 protobuf

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: CMake
      run: |
        mkdir "${{ runner.workspace }}/build"
        cd "${{ runner.workspace }}/build"
        cmake $GITHUB_WORKSPACE -G "Ninja" \
        -DHAS_HDF5=ON \
        -DHAS_QT5=ON \
        -DHAS_CURL=ON \
        -DHAS_CAPNPROTO=OFF \
        -DBUILD_DOCS=ON \
        -DBUILD_APPS=ON \
        -DBUILD_SAMPLES=ON \
        -DBUILD_TIME=ON \
        -DBUILD_PY_BINDING=ON \
        -DBUILD_CSHARP_BINDING=OFF \
        -DBUILD_TESTS=ON \
        -DECAL_LAYER_ICEORYX=OFF \
        -DECAL_INCLUDE_PY_SAMPLES=OFF \
        -DECAL_INSTALL_SAMPLE_SOURCES=ON \
        -DECAL_JOIN_MULTICAST_TWICE=OFF \
        -DECAL_NPCAP_SUPPORT=OFF \
        -DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON \
        -DECAL_THIRDPARTY_BUILD_PROTOBUF=OFF \
        -DECAL_THIRDPARTY_BUILD_SPDLOG=ON \
        -DECAL_THIRDPARTY_BUILD_TINYXML2=ON \
        -DECAL_THIRDPARTY_BUILD_FINEFTP=ON \
        -DECAL_THIRDPARTY_BUILD_CURL=OFF \
        -DECAL_THIRDPARTY_BUILD_GTEST=ON \
        -DECAL_THIRDPARTY_BUILD_HDF5=OFF
      shell: bash

    - name: Build Release
      run: cmake --build . --config Release
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Python Egg
      run: cmake --build . --target create_python_egg --config Release
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Documentation C
      run: cmake --build . --target documentation_c
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Documentation C++
      run: cmake --build . --target documentation_cpp
      working-directory: ${{ runner.workspace }}/build      

#    currently all tests fail under macos ..
#    - name: Run Tests
#      run: ctest -V
#      working-directory: ${{ runner.workspace }}/build

    - name: Pack
      run: cpack -G DragNDrop
      working-directory: ${{ runner.workspace }}/build

    - name: Upload DMG
      uses: actions/upload-artifact@v2
      with:
        name: macos-dmg
        path: ${{ runner.workspace }}/build/_deploy/*.dmg

    - name: Upload Python Egg
      uses: actions/upload-artifact@v2
      with:
        name: macos-python-egg
        path: ${{ runner.workspace }}/build/_deploy/*.egg
