name: Build with CMake and Ninja

on: [push]

jobs:
  build:
    strategy:
      matrix:
        # os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        os: ['ubuntu-latest', 'windows-latest']
    runs-on: ${{ matrix.os }}

    steps:
    - name: Install Qt (all platforms)
      uses: jurplel/install-qt-action@v2

    - name: Install Dependencies (Linux)
      run: sudo apt-get install ninja-build doxygen graphviz zlib1g-dev libhdf5-dev python3.6-dev python3-pip python3-setuptools libcurl4-openssl-dev libprotobuf-dev libprotoc-dev protobuf-compiler
      if: matrix.os == 'ubuntu-latest'

    - name: Install Dependencies (Windows)
      run: choco install ninja doxygen.install
      if: matrix.os == 'windows-latest'

    - name: Install Dependencies (macOS)
      run: brew install ninja
      if: matrix.os == 'macos-latest'

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Setup CMake (Linux)
      run: |
        mkdir "${{ runner.workspace }}/build"
        cd "${{ runner.workspace }}/build"
        cmake .. -DBUILD_TESTS=ON -DECAL_THIRDPARTY_BUILD_GTEST=ON -DECAL_THIRDPARTY_BUILD_HDF5=OFF -DECAL_THIRDPARTY_BUILD_PROTOBUF=OFF -DECAL_THIRDPARTY_BUILD_CURL=OFF -DBUILD_PY_BINDING=ON -DBUILD_DOCS=ON
      shell: bash
      if: matrix.os == 'ubuntu-latest'

    - name: Setup CMake (Windows)
      run: |
        mkdir "${{ runner.workspace }}/build"
        cd "${{ runner.workspace }}/build"
        cmake .. -G "Visual Studio 16 2019" -A x64 -DBUILD_TESTS=ON -DBUILD_CSHARP_BINDING=ON -DECAL_THIRDPARTY_BUILD_GTEST=ON -DBUILD_PY_BINDING=ON -DBUILD_DOCS=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=_install
      shell: cmd
      if: matrix.os == 'windows-latest'

    - name: Build Release
      run: cmake --build . --config Release
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Python Egg
      run: cmake --build . --target create_python_egg --config Release
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Documentation C
      run: cmake --build . --target documentation_c
      working-directory: ${{ runner.workspace }}/build      

    - name: Build Documentation C++
      run: cmake --build . --target documentation_cpp
      working-directory: ${{ runner.workspace }}/build      

    - name: Run Tests
      run: ctest -V
      working-directory: ${{ runner.workspace }}/build

    - name: Pack (Linux)
      run: cpack -G DEB
      working-directory: ${{ runner.workspace }}/build
      if: matrix.os == 'ubuntu-latest'
  
    - name: Pack (Windows)
      run: cpack -C Release
      working-directory: ${{ runner.workspace }}/build
      if: matrix.os == 'windows-latest'
