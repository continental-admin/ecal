cmake_minimum_required(VERSION 3.5.1)

# TODO: Add a version number later
#include("${CMAKE_CURRENT_LIST_DIR}/version.cmake")
#project(ecal_service VERSION ${ECAL_SERVICE_VERSION_MAJOR}.${ECAL_SERVICE_VERSION_MINOR}.${ECAL_SERVICE_VERSION_PATCH})

project(ecal_service)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Disable default export of symbols
set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)

find_package(Threads REQUIRED)
find_package(asio REQUIRED)

# TODO: generate export header doesn't work with object libs. Is there any solution?
# Include GenerateExportHeader that will create export macros for us
#include(GenerateExportHeader)

# Public API include directory
set (includes
    include/ecal/service/ecal_service_client_session.h
    include/ecal/service/ecal_service_client_session_types.h
    include/ecal/service/ecal_service_error.h
    include/ecal/service/ecal_service_logger.h
    include/ecal/service/ecal_service_server.h
    include/ecal/service/ecal_service_server_session_types.h
)

# Private source files
set(sources
    src/ecal_service_client_session.cpp
    src/ecal_service_client_session_impl_base.h
    src/ecal_service_client_session_impl_v1.cpp
    src/ecal_service_client_session_impl_v1.h
    src/ecal_service_log_helpers.h
    src/ecal_service_server.cpp
    src/ecal_service_server_impl.cpp
    src/ecal_service_server_impl.h
    src/ecal_service_server_session_impl_base.h
    src/ecal_service_server_session_impl_v1.cpp
    src/ecal_service_server_session_impl_v1.h
    src/ecal_service_tcp_protocol_layout.h
    src/ecal_service_tcp_protocol_v1.cpp
    src/ecal_service_tcp_protocol_v1.h
)

#TODO: Make it variable to build obj/static/shared
add_library (${PROJECT_NAME} OBJECT
    ${includes}
    ${sources}
)

# TODO: Add the version later, again
# Generate version defines
#configure_file("ecal_service_version.h.in" "${PROJECT_BINARY_DIR}/include/ecal_service/ecal_service_version.h" @ONLY)

# TODO: generate export header doesn't work with object libs. Is there any solution?
# Generate header with export macros
#generate_export_header(${PROJECT_NAME}
#  EXPORT_FILE_NAME ${PROJECT_BINARY_DIR}/include/ecal/service/ecal_service_export.h
#  BASE_NAME ECAL_SERVICE
#)

# TODO: review this alias target. It probably should be eCAL::Service or something like that.
# add_library (ecal_service::${PROJECT_NAME} ALIAS ${PROJECT_NAME})

target_link_libraries(${PROJECT_NAME}
    PUBLIC
        # Link header-only libs (asio & recycle) as described in this workaround:
        # https://gitlab.kitware.com/cmake/cmake/-/issues/15415#note_633938
        $<BUILD_INTERFACE:asio::asio>
    PRIVATE
        Threads::Threads
        $<$<BOOL:${WIN32}>:ws2_32>
        $<$<BOOL:${WIN32}>:wsock32>

)

target_compile_definitions(${PROJECT_NAME}
    PRIVATE
        ASIO_STANDALONE
        _WIN32_WINNT=0x0601
)

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_14)

target_compile_options(${PROJECT_NAME} PRIVATE
                           $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
                                -Wall -Wextra>
                           $<$<CXX_COMPILER_ID:MSVC>:
                                /W4>)


# Add own public include directory
target_include_directories(${PROJECT_NAME}
  PUBLIC 
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>   # To find the export file generated by generate_export_header
    $<INSTALL_INTERFACE:include>
    "${CMAKE_CURRENT_LIST_DIR}/../core/include/"    #TODO: This should be removed, once there is a proper types lib or something similar. it only exists to find the "ecal_callback_cimpl.h"
  PRIVATE
    src/
)

set_target_properties(${PROJECT_NAME} PROPERTIES
# TODO: Add the version later again
#    VERSION ${PROJECT_VERSION}
#    SOVERSION ${PROJECT_VERSION_MAJOR}
    OUTPUT_NAME ${PROJECT_NAME}
    FOLDER ecal/core
)

##################################

source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}" FILES 
    ${includes}
    ${sources}
)